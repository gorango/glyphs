#!/usr/bin/env node

const parseArgs = require('minimist')
const { log, PRINT } = require('../utils/logger')

const args = process.argv.slice(2)
const argv = parseArgs(args, {
  alias: {
    d: 'data',
    s: 'svg',
    p: 'preview',
    h: 'help'
  },
  boolean: ['h', 'p'],
  string: ['S', 'd', 's']
})

if (argv.help) {
  PRINT.SYNC.HELP()
  process.exit()
}

const path = require('path')
const inquirer = require('inquirer')
const { configs, hasConfig } = require('../utils/config')

;(async () => {
  log()
  let { _: [query], preview: generatePreview } = argv
  let key

  if (!hasConfig) {
    PRINT.SYNC.NO_CONFIG()
    process.exit(1)
  }

  if (query) {
    const fileConf = query in configs
      ? configs[query]
      : Object.values(configs).find(({ name }) =>
        name.toLowerCase().includes(query.toLowerCase()))

    if (fileConf) {
      key = fileConf.key
    } else {
      PRINT.SYNC.NOT_FOUND(({ query }))
      query = null
    }
  }

  if (!query) {
    if (Object.keys(configs).length > 1) {
      const choices = Object.entries(configs)
        .map(([key, { name }]) => ({ value: key, name }))
      const questions = [
        { type: 'list', name: 'name', message: 'Select the file to sync', choices }
      ]

      const answers = await inquirer.prompt(questions)
      key = answers.name
    } else {
      key = Object.keys(configs)[0]
    }
  }

  const syncArgs = {
    data: 'data',
    svg: 'svg',
    ...argv,
    key
  }

  const sync = require('../lib/sync')

  const run = async () => {
    await sync(syncArgs).catch(handleError)
    if (generatePreview) {
      const dataDir = path.join(process.cwd(), syncArgs.data)
      require('../lib/preview')(dataDir)
    }
    log()
    process.exit()
  }

  run()
})()

function handleError (err) {
  log()
  log(err.message)
  process.env.NODE_ENV === 'dev' && log(err)
  log()
  process.exit(1)
}
