#!/usr/bin/env node

const parseArgs = require('minimist')
const { log, PRINT } = require('../utils/logger')

const args = process.argv.slice(2)
const argv = parseArgs(args, {
  alias: {
    h: 'help',
  },
  boolean: ['h']
})

if (argv.help) {
  PRINT.GET.HELP()
  process.exit()
}

const inquirer = require('inquirer')
const { localConfigs, hasConfig } = require('../utils/config')

const { _: [query] } = argv

;(async () => {
  log()

  if (!hasConfig) {
    PRINT.GET.NO_CONFIG()
    process.exit(1)
  }

  if (!query && hasConfig) {
    let key
    const choices = Object.entries(localConfigs).map(([key, { name }]) => ({ value: key, name }))

    if (Object.keys(localConfigs).length === 1) {
      key = choices[0].value
    } else {
      const questions = [{
        type: 'list',
        name: 'name',
        message: 'Select an icon set to print config',
        choices,
      }]

      const answers = await inquirer.prompt(questions)
      log()
      key = answers.name
    }

    const setConfig = localConfigs[key]
    PRINT.GET.CONFIG({
      name: setConfig.name,
      key,
      token: setConfig.token
    })
  } else if (query) {
    const setConfig = query in localConfigs ? localConfigs[query] : Object.values(localConfigs).find(({ name }) => name.toLowerCase().includes(query.toLowerCase()))
    if (setConfig) {
      PRINT.GET.CONFIG({
        name: setConfig.name,
        key: setConfig.key,
        token: setConfig.token
      })
    } else {
      log(`Can't find the icon set with that name or key`, 1)
    }
  }
  log()
  process.exit()
})();
