
import { forwardRef } from 'react'
import { transform } from '../utils'

const renderString = ({ variant, strokeWidth='3', strokeLinecap='round', strokeLinejoin='round' }) => {
  switch (variant) {    
    case 'path':
      return (
        <>
          <path
            d="M49.627 33.8281L39.7279 23.9285L36.8995 21.1C34.274 18.4745 30.713 16.9995 27 16.9995C23.287 16.9995 19.726 18.4745 17.1005 21.1C14.475 23.7255 13 27.2865 13 30.9995C13 34.7125 14.475 38.2735 17.1005 40.899L31.1813 54.9798C31.2016 55.0003 31.222 55.0208 31.2425 55.0413L38.3136 62.1124C39.0946 62.8934 40.3609 62.8934 41.142 62.1124L62.3552 40.8992C64.9807 38.2737 66.4557 34.7127 66.4557 30.9997C66.4557 27.2867 64.9807 23.7257 62.3552 21.1002C59.7297 18.4747 56.1687 16.9997 52.4557 16.9997C48.7427 16.9997 45.1817 18.4747 42.5562 21.1002L39.8008 23.8555"
            stroke="currentColor"
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
        </>
      )
    case 'bold':
      return (
        <>
          <path
            d="M13 30.9995C13 27.2865 14.475 23.7255 17.1005 21.1C19.726 18.4745 23.287 16.9995 27 16.9995C30.2037 16.9995 33.2943 18.0976 35.7683 20.0854C35.7908 20.1111 35.8143 20.1363 35.8388 20.1608L48.5667 32.8887C49.1525 33.4745 50.1022 33.4745 50.688 32.8887C51.2738 32.3029 51.2738 31.3531 50.688 30.7674L41.7885 21.8679L42.5562 21.1002C45.1817 18.4747 48.7427 16.9997 52.4557 16.9997C56.1687 16.9997 59.7297 18.4747 62.3552 21.1002C64.9807 23.7257 66.4557 27.2867 66.4557 30.9997C66.4557 34.7127 64.9807 38.2737 62.3552 40.8992L41.1421 62.1122C40.3611 62.8933 39.0946 62.8934 38.3135 62.1124L31.2425 55.0413L31.1813 54.9798L17.1005 40.899C14.475 38.2735 13 34.7125 13 30.9995Z"
            fill="currentColor"
          />
        </>
      )
    case 'poly':
      return (
        <>
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M17.373 20.8056C14.7475 23.4311 13.2725 26.992 13.2725 30.7051C13.2725 34.4181 14.7475 37.9791 17.373 40.6046L31.5151 54.7467L38.5862 61.8178C39.3672 62.5988 40.6335 62.5988 41.4146 61.8178L48.4857 54.7467L62.6278 40.6046C65.2533 37.9791 66.7283 34.4181 66.7283 30.7051C66.7283 26.992 65.2533 23.4311 62.6278 20.8056C60.0023 18.1801 56.4413 16.7051 52.7283 16.7051C49.0153 16.7051 45.4543 18.1801 42.8288 20.8056L40.6914 22.943C40.3098 23.3246 39.691 23.3246 39.3094 22.943L37.172 20.8056C34.5464 18.1801 30.9855 16.7051 27.2725 16.7051C23.5594 16.7051 19.9985 18.1801 17.373 20.8056Z"
            fill="#EB5757"
          />
          <path
            d="M13.2725 30.7051H11.2725H13.2725ZM17.373 40.6046L15.9588 42.0188L17.373 40.6046ZM31.5151 54.7467L32.9293 53.3325L31.5151 54.7467ZM48.4857 54.7467L47.0714 53.3325L48.4857 54.7467ZM27.2725 16.7051L27.2725 14.7051H27.2725V16.7051ZM38.5862 61.8178L40.0004 60.4036L38.5862 61.8178ZM41.4146 61.8178L40.0004 60.4036L41.4146 61.8178ZM15.9588 19.3914C12.9582 22.392 11.2725 26.4616 11.2725 30.7051H15.2725C15.2725 27.5225 16.5367 24.4702 18.7872 22.2198L15.9588 19.3914ZM11.2725 30.7051C11.2725 34.9485 12.9582 39.0182 15.9588 42.0188L18.7872 39.1904C16.5367 36.9399 15.2725 33.8877 15.2725 30.7051H11.2725ZM15.9588 42.0188L30.1009 56.1609L32.9293 53.3325L18.7872 39.1904L15.9588 42.0188ZM30.1009 56.1609L37.172 63.232L40.0004 60.4036L32.9293 53.3325L30.1009 56.1609ZM42.8288 63.232L49.8999 56.1609L47.0714 53.3325L40.0004 60.4036L42.8288 63.232ZM49.8999 56.1609L64.042 42.0188L61.2136 39.1904L47.0714 53.3325L49.8999 56.1609ZM64.042 42.0188C67.0426 39.0182 68.7283 34.9485 68.7283 30.7051H64.7283C64.7283 33.8877 63.464 36.9399 61.2136 39.1904L64.042 42.0188ZM68.7283 30.7051C68.7283 26.4616 67.0426 22.392 64.042 19.3914L61.2136 22.2198C63.464 24.4702 64.7283 27.5225 64.7283 30.7051H68.7283ZM64.042 19.3914C61.0414 16.3908 56.9718 14.7051 52.7283 14.7051V18.7051C55.9109 18.7051 58.9631 19.9694 61.2136 22.2198L64.042 19.3914ZM52.7283 14.7051C48.4848 14.7051 44.4152 16.3908 41.4146 19.3914L44.243 22.2198C46.4935 19.9694 49.5457 18.7051 52.7283 18.7051V14.7051ZM41.4146 19.3914L39.2772 21.5288L42.1056 24.3572L44.243 22.2198L41.4146 19.3914ZM40.7236 21.5288L38.5862 19.3914L35.7577 22.2198L37.8951 24.3572L40.7236 21.5288ZM38.5862 19.3914C35.5856 16.3908 31.5159 14.7051 27.2725 14.7051L27.2725 18.7051C30.4551 18.7051 33.5073 19.9694 35.7577 22.2198L38.5862 19.3914ZM27.2725 14.7051C23.029 14.7051 18.9593 16.3908 15.9588 19.3914L18.7872 22.2198C21.0376 19.9694 24.0899 18.7051 27.2725 18.7051V14.7051ZM39.2772 21.5288C39.6766 21.1294 40.3242 21.1294 40.7236 21.5288L37.8951 24.3572C39.0578 25.5199 40.9429 25.5199 42.1056 24.3572L39.2772 21.5288ZM37.172 63.232C38.7341 64.7941 41.2667 64.7941 42.8288 63.232L40.0004 60.4036L37.172 63.232Z"
            fill="#F2C94C"
          />
          <path
            d="M48.2128 35.2424C48.9938 36.0234 50.2602 36.0234 51.0412 35.2424C51.8223 34.4613 51.8223 33.195 51.0412 32.414L48.2128 35.2424ZM41.1418 22.5145C40.3607 21.7334 39.0944 21.7334 38.3133 22.5145C37.5323 23.2955 37.5323 24.5619 38.3133 25.3429L41.1418 22.5145ZM51.0412 32.414L41.1418 22.5145L38.3133 25.3429L48.2128 35.2424L51.0412 32.414Z"
            fill="#F2C94C"
          />
        </>
      )
    case 'duo':
      return (
        <>
          <path
            d="M17.373 20.8056C14.7475 23.4311 13.2725 26.992 13.2725 30.7051C13.2725 34.4181 14.7475 37.9791 17.373 40.6046L38.5862 61.8178C39.3672 62.5988 40.6335 62.5988 41.4146 61.8178L62.6278 40.6046C65.2533 37.9791 66.7283 34.4181 66.7283 30.7051C66.7283 26.992 65.2533 23.4311 62.6278 20.8056C60.0023 18.1801 56.4413 16.7051 52.7283 16.7051C49.0153 16.7051 45.4543 18.1801 42.8288 20.8056L40.6914 22.943C40.3098 23.3246 39.691 23.3246 39.3094 22.943L37.172 20.8056C34.5464 18.1801 30.9855 16.7051 27.2725 16.7051C23.5594 16.7051 19.9985 18.1801 17.373 20.8056Z"
            fill="currentColor"
            fill-opacity="0.25"
          />
          <path
            d="M49.6272 33.828L39.7277 23.9285M13.2725 30.7051C13.2725 26.992 14.7475 23.4311 17.373 20.8056C19.9985 18.1801 23.5594 16.7051 27.2725 16.7051C30.9855 16.7051 34.5464 18.1801 37.172 20.8056L39.3094 22.943C39.691 23.3246 40.3098 23.3246 40.6914 22.943L42.8288 20.8056C45.4543 18.1801 49.0153 16.7051 52.7283 16.7051C56.4413 16.7051 60.0023 18.1801 62.6278 20.8056C65.2533 23.4311 66.7283 26.992 66.7283 30.7051C66.7283 34.4181 65.2533 37.9791 62.6278 40.6046L41.4146 61.8178C40.6335 62.5988 39.3672 62.5988 38.5862 61.8178L17.373 40.6046C14.7475 37.9791 13.2725 34.4181 13.2725 30.7051Z"
            stroke="currentColor"
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
        </>
      )
    case 'outline':
      return (
        <>
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M27 14.9995C22.7565 14.9995 18.6869 16.6852 15.6863 19.6858C12.6857 22.6864 11 26.756 11 30.9995C11 35.243 12.6857 39.3126 15.6863 42.3132L29.7596 56.3864L29.8283 56.4555L36.8993 63.5266C38.4614 65.0887 40.9941 65.0887 42.5562 63.5266L42.5605 63.5223L63.7694 42.3134C66.77 39.3128 68.4557 35.2432 68.4557 30.9997C68.4557 26.7562 66.77 22.6866 63.7694 19.686C60.7688 16.6854 56.6992 14.9997 52.4557 14.9997C48.2122 14.9997 44.1426 16.6854 41.142 19.686L39.7279 21.1L38.3137 19.6858C35.3131 16.6852 31.2435 14.9995 27 14.9995ZM18.5147 22.5142C20.7652 20.2638 23.8174 18.9995 27 18.9995C30.1826 18.9995 33.2348 20.2638 35.4853 22.5142L38.2839 25.3129C38.2936 25.3229 38.3034 25.3329 38.3133 25.3429L48.2128 35.2423C48.9938 36.0234 50.2602 36.0234 51.0412 35.2423C51.8223 34.4613 51.8223 33.195 51.0412 32.4139L42.556 23.9288L43.9704 22.5144C46.2208 20.264 49.2731 18.9997 52.4557 18.9997C55.6383 18.9997 58.6905 20.264 60.941 22.5144C63.1914 24.7648 64.4557 27.8171 64.4557 30.9997C64.4557 34.1823 63.1914 37.2345 60.941 39.485L39.7279 60.698L32.6567 53.6271L32.603 53.5731L18.5147 39.4848C16.2643 37.2344 15 34.1821 15 30.9995C15 27.8169 16.2643 24.7647 18.5147 22.5142Z"
            stroke="currentColor"
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
        </>
      )
  }
}

const CoreHeart1 = forwardRef((props, ref) => {
  const { size, variant, rotate, flip, children } = props

  return (
    <svg
      ref={ref}
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 80 80"
      width={size || 40}
      height={size || 40}
      transform={transform(rotate, flip)}
    >
      {children}
      <g>
        {renderString({ size, variant, rotate, flip })}
      </g>
    </svg>
  )
})

CoreHeart1.displayName = 'CoreHeart1'

export default CoreHeart1
