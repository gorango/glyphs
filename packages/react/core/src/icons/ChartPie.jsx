
import { forwardRef } from 'react'
import { transform } from '../utils'

const renderString = ({ variant, strokeWidth='3', strokeLinecap='round', strokeLinejoin='round' }) => {
  switch (variant) {    
    case 'path':
      return (
        <>
          <path
            d="M65.6036 25.2178C67.5265 28.5484 68.7998 32.254 69.3115 36.1409C70.3349 43.9148 68.2283 51.7768 63.4551 57.9974C58.6818 64.218 51.633 68.2876 43.8592 69.3111C36.0853 70.3345 28.2234 68.2279 22.0028 63.4547C18.8925 61.068 16.3199 58.1125 14.397 54.7819L65.6036 25.2178Z"
            stroke="currentColor"
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
          <path
            d="M41.162 10.4586L40.0004 40L14.397 54.7821C12.4741 51.4515 11.2008 47.7459 10.6891 43.8589C9.66563 36.0851 11.7722 28.2231 16.5455 22.0025C21.3187 15.7819 28.3676 11.7123 36.1414 10.6888C37.8166 10.4683 39.4959 10.3931 41.162 10.4586Z"
            stroke="currentColor"
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
          <path
            d="M41.1488 10.458C47.2187 10.6941 53.1139 12.7979 57.9974 16.5451C61.0989 18.925 63.6657 21.8705 65.5869 25.1896L40 39.9999L41.1488 10.458Z"
            stroke="currentColor"
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
        </>
      )
    case 'bold':
      return (
        <>
          <path
            d="M38.4681 15.0643C38.5117 13.9429 37.5803 13.021 36.4677 13.1675C29.3513 14.1044 22.8985 17.8299 18.5289 23.5245C14.1593 29.219 12.2308 36.4162 13.1677 43.5326C13.428 45.5102 13.9037 47.4364 14.5771 49.281C14.9809 50.3871 16.2926 50.801 17.3123 50.2122L36.6002 39.0763C37.195 38.7329 37.572 38.1083 37.5987 37.422L38.4681 15.0643Z"
            fill="currentColor"
          />
          <path
            d="M19.8123 54.5423C18.7926 55.1311 18.4952 56.474 19.2512 57.3767C20.5119 58.8822 21.9423 60.2573 23.5247 61.4715C29.2193 65.8411 36.4164 67.7696 43.5329 66.8327C50.6493 65.8958 57.1021 62.1702 61.4717 56.4757C65.8413 50.7811 67.7698 43.5839 66.8329 36.4675C66.5725 34.4899 66.0969 32.5637 65.4235 30.7191C65.0197 29.613 63.708 29.1992 62.6882 29.7879L19.8123 54.5423Z"
            fill="currentColor"
          />
          <path
            d="M45.7184 13.5469C44.5674 13.298 43.5173 14.1865 43.4711 15.3631L42.8195 31.9334C42.7576 33.5079 44.4561 34.5323 45.8198 33.743L60.1722 25.4355C61.1913 24.8456 61.4872 23.5024 60.7302 22.6005C59.4741 21.104 58.0503 19.7367 56.4759 18.5286C53.2718 16.07 49.5919 14.3842 45.7184 13.5469Z"
            fill="currentColor"
          />
        </>
      )
    case 'poly':
      return (
        <>
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M69.7714 29.1208C71.7069 32.4733 72.9886 36.2033 73.5036 40.1157C74.5338 47.9406 72.4134 55.8543 67.6088 62.1157C62.8042 68.3772 55.709 72.4736 47.8841 73.5038C40.0592 74.5339 32.1456 72.4135 25.8841 67.6089C22.7534 65.2066 20.1639 62.2317 18.2284 58.8792L43.9999 43.9999L69.7714 29.1208Z"
            fill="#2F80ED"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M45.1695 14.2645L44.0003 44L18.2287 58.8792C16.2931 55.5267 15.0115 51.7967 14.4964 47.8843C13.4662 40.0594 15.5867 32.1457 20.3913 25.8843C25.1959 19.6228 32.2911 15.5264 40.1159 14.4962C41.8022 14.2742 43.4925 14.1985 45.1695 14.2645Z"
            fill="#219653"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M45.1563 14.2639C51.2662 14.5015 57.2001 16.6191 62.1157 20.391C65.2376 22.7865 67.8212 25.7514 69.755 29.0923L44 43.9999L45.1563 14.2639Z"
            fill="#F2C94C"
          />
        </>
      )
    case 'duo':
      return (
        <>
          <path
            d="M65.6036 25.218C67.5265 28.5486 68.7998 32.2542 69.3115 36.1412C70.335 43.915 68.2283 51.777 63.4551 57.9976C58.6819 64.2182 51.633 68.2878 43.8592 69.3113C36.0854 70.3347 28.2234 68.2281 22.0028 63.4549C18.8925 61.0682 16.3199 58.1127 14.397 54.7821L40.0004 40L65.6036 25.218Z"
            fill="currentColor"
            fill-opacity="0.25"
          />
          <path
            d="M41.162 10.4586L40.0004 40L14.397 54.7821C12.4741 51.4515 11.2008 47.7459 10.6891 43.8589C9.66563 36.0851 11.7722 28.2231 16.5455 22.0025C21.3187 15.7819 28.3676 11.7123 36.1414 10.6888C37.8166 10.4683 39.4959 10.3931 41.162 10.4586Z"
            fill="currentColor"
            fill-opacity="0.25"
          />
          <path
            d="M41.1491 10.4581C47.2191 10.6942 53.1143 12.798 57.9978 16.5452C61.0993 18.9251 63.6661 21.8706 65.5872 25.1897L40.0004 40L41.1491 10.4581Z"
            fill="currentColor"
            fill-opacity="0.25"
          />
          <path
            d="M14.397 54.7821C16.3199 58.1127 18.8925 61.0682 22.0028 63.4549C28.2234 68.2281 36.0854 70.3347 43.8592 69.3113C51.633 68.2878 58.6819 64.2182 63.4551 57.9976C68.2283 51.777 70.335 43.915 69.3115 36.1412C68.7998 32.2542 67.5265 28.5486 65.6036 25.218L40.0004 40M14.397 54.7821L40.0004 40M14.397 54.7821C12.4741 51.4515 11.2008 47.7459 10.6891 43.8589C9.66563 36.0851 11.7722 28.2231 16.5455 22.0025C21.3187 15.7819 28.3676 11.7123 36.1414 10.6888C37.8166 10.4683 39.4959 10.3931 41.162 10.4586L40.0004 40M40.0004 40L65.5872 25.1897C63.6661 21.8706 61.0993 18.9251 57.9978 16.5452C53.1143 12.798 47.2191 10.6942 41.1491 10.4581L40.0004 40Z"
            stroke="currentColor"
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
        </>
      )
    case 'outline':
      return (
        <>
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M39.0701 12.4515C38.1817 12.4815 37.2915 12.5547 36.4025 12.6717C29.1545 13.6259 22.5825 17.4203 18.1322 23.2201C13.6819 29.0198 11.7178 36.35 12.672 43.5979C13.0603 46.5476 13.919 49.3854 15.192 52.0138L38.0448 38.8197L39.0701 12.4515ZM41.2247 8.45954C39.451 8.39068 37.6635 8.47119 35.8804 8.70594C27.5806 9.79862 20.0549 14.1436 14.9588 20.785C9.86264 27.4264 7.61352 35.8203 8.70619 44.12C9.25253 48.2698 10.612 52.2263 12.665 55.7821C14.7179 59.338 17.4646 62.4935 20.7853 65.0416C27.4267 70.1377 35.8205 72.3868 44.1203 71.2942C52.42 70.2015 59.9457 65.8565 65.0418 59.2151C70.138 52.5737 72.3871 44.1798 71.2944 35.8801C70.7481 31.7303 69.3886 27.7738 67.3357 24.218C67.3328 24.213 67.3299 24.208 67.327 24.2031C67.3241 24.198 67.3211 24.1929 67.3182 24.1878C65.2671 20.6443 62.5266 17.4994 59.2153 14.9585C54.005 10.9605 47.7163 8.71482 41.2406 8.46016C41.236 8.45998 41.2314 8.4598 41.2269 8.45962M42.1415 36.4498L43.079 12.6083C48.0227 13.1641 52.7678 15.053 56.7803 18.1319C59.1325 19.9368 61.1548 22.0906 62.7915 24.497L42.1415 36.4498ZM17.192 55.4779C18.8318 57.8944 20.8599 60.057 23.2203 61.8682C29.0201 66.3185 36.3502 68.2826 43.5981 67.3284C50.8461 66.3742 57.4181 62.5798 61.8684 56.78C66.3187 50.9803 68.2828 43.6501 67.3286 36.4022C66.9403 33.4525 66.0816 30.6147 64.8087 27.9863L17.192 55.4779Z"
            stroke="currentColor"
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
        </>
      )
  }
}

const CoreChartPie = forwardRef((props, ref) => {
  const { size, variant, rotate, flip, children } = props

  return (
    <svg
      ref={ref}
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 80 80"
      width={size || 40}
      height={size || 40}
      transform={transform(rotate, flip)}
    >
      {children}
      <g>
        {renderString({ size, variant, rotate, flip })}
      </g>
    </svg>
  )
})

CoreChartPie.displayName = 'CoreChartPie'

export default CoreChartPie
