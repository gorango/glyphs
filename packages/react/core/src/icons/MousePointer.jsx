
import React, { forwardRef } from 'react'
import { transform } from '../utils'

const renderString = ({ variant, strokeWidth='3', strokeLinecap='round', strokeLinejoin='round' }) => {
  switch (variant) {    
    case 'path':
      return (
        <>
          <path
            d="M57.7027 53.0272C58.3779 54.7826 56.4768 56.4148 54.8438 55.4816L45 49.8566V67.1723C45 68.2769 44.1046 69.1723 43 69.1723H37C35.8954 69.1723 35 68.2769 35 67.1723V49.8576L25.1556 55.4829C23.5226 56.4161 21.6215 54.7839 22.2967 53.0285L38.1333 11.8533C38.7907 10.1439 41.2092 10.1439 41.8666 11.8533L57.7027 53.0272Z"
            stroke="currentColor"
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
        </>
      )
    case 'bold':
      return (
        <>
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M57.7027 53.0272C58.3779 54.7826 56.4768 56.4148 54.8438 55.4816L45 49.8566L45 67.1723C45 68.2769 44.1046 69.1723 43 69.1723H37C35.8954 69.1723 35 68.2769 35 67.1723L35 49.8576L25.1556 55.4829C23.5226 56.4161 21.6215 54.7839 22.2967 53.0285L38.1333 11.8533C38.7907 10.1439 41.2092 10.1439 41.8666 11.8533L57.7027 53.0272Z"
            fill="currentColor"
          />
          <path
            d="M54.8438 55.4816L53.8515 57.2181L53.8515 57.2181L54.8438 55.4816ZM57.7027 53.0272L59.5694 52.3092L57.7027 53.0272ZM45 49.8566L45.9923 48.1201C45.3733 47.7664 44.6128 47.7689 43.9961 48.1268C43.3795 48.4846 43 49.1437 43 49.8566H45ZM35 49.8576H37C37 49.1446 36.6205 48.4856 36.0039 48.1278C35.3872 47.7699 34.6267 47.7674 34.0077 48.1211L35 49.8576ZM25.1556 55.4829L26.1479 57.2194L26.1479 57.2194L25.1556 55.4829ZM22.2967 53.0285L20.43 52.3105L22.2967 53.0285ZM38.1333 11.8533L36.2666 11.1354L36.2666 11.1354L38.1333 11.8533ZM41.8666 11.8533L43.7333 11.1354V11.1354L41.8666 11.8533ZM53.8515 57.2181C57.1175 59.0844 60.9198 55.8202 59.5694 52.3092L55.836 53.7451C55.8406 53.757 55.8422 53.764 55.8427 53.7662C55.8432 53.7685 55.8429 53.7678 55.8427 53.7644C55.8426 53.7611 55.8427 53.7568 55.8432 53.7519C55.8438 53.747 55.8447 53.7426 55.8458 53.739C55.8478 53.7316 55.8497 53.7295 55.8482 53.7319C55.8464 53.7345 55.8425 53.7396 55.836 53.7451C55.8296 53.7506 55.824 53.7538 55.8211 53.7551C55.8186 53.7562 55.8209 53.7548 55.8285 53.7538C55.8323 53.7533 55.8367 53.7531 55.8416 53.7533C55.8466 53.7534 55.8509 53.754 55.8541 53.7547C55.8574 53.7553 55.8581 53.7557 55.8559 53.7549C55.8537 53.7541 55.8471 53.7514 55.836 53.7451L53.8515 57.2181ZM44.0077 51.5931L53.8515 57.2181L55.836 53.7451L45.9923 48.1201L44.0077 51.5931ZM43 49.8566L43 67.1723H47L47 49.8566H43ZM43 67.1723V71.1723C45.2091 71.1723 47 69.3815 47 67.1723H43ZM43 67.1723H37V71.1723H43V67.1723ZM37 67.1723H33C33 69.3815 34.7909 71.1723 37 71.1723V67.1723ZM37 67.1723L37 49.8576H33L33 67.1723H37ZM26.1479 57.2194L35.9923 51.5941L34.0077 48.1211L24.1634 53.7464L26.1479 57.2194ZM20.43 52.3105C19.0796 55.8214 22.8819 59.0857 26.1479 57.2194L24.1634 53.7464C24.1523 53.7527 24.1457 53.7554 24.1435 53.7562C24.1413 53.757 24.142 53.7566 24.1453 53.756C24.1485 53.7553 24.1528 53.7547 24.1578 53.7546C24.1627 53.7544 24.1671 53.7547 24.1709 53.7551C24.1785 53.7561 24.1808 53.7575 24.1783 53.7564C24.1754 53.7551 24.1698 53.7519 24.1634 53.7464C24.1569 53.7409 24.153 53.7358 24.1512 53.7332C24.1497 53.7308 24.1516 53.7329 24.1536 53.7403C24.1547 53.7439 24.1556 53.7483 24.1562 53.7532C24.1567 53.7581 24.1568 53.7624 24.1567 53.7657C24.1565 53.769 24.1562 53.7698 24.1567 53.7675C24.1572 53.7653 24.1588 53.7583 24.1634 53.7464L20.43 52.3105ZM36.2666 11.1354L20.43 52.3105L24.1634 53.7464L39.9999 12.5713L36.2666 11.1354ZM43.7333 11.1354C42.4184 7.71659 37.5815 7.7166 36.2666 11.1354L39.9999 12.5713C40.0041 12.5606 40.0072 12.5549 40.0082 12.5531C40.0093 12.5513 40.009 12.552 40.0071 12.5544C40.0052 12.5567 40.0025 12.5596 39.9992 12.5625C39.9959 12.5655 39.9927 12.5679 39.9898 12.5698C39.984 12.5735 39.9815 12.5739 39.9839 12.5732C39.9866 12.5724 39.9923 12.5713 39.9999 12.5713C40.0076 12.5713 40.0133 12.5724 40.016 12.5732C40.0184 12.5739 40.0159 12.5735 40.0101 12.5698C40.0072 12.5679 40.004 12.5655 40.0007 12.5625C39.9974 12.5596 39.9947 12.5567 39.9928 12.5544C39.9909 12.552 39.9906 12.5513 39.9917 12.5531C39.9927 12.5549 39.9958 12.5605 39.9999 12.5713L43.7333 11.1354ZM59.5694 52.3092L43.7333 11.1354L39.9999 12.5713L55.836 53.7451L59.5694 52.3092Z"
            fill="currentColor"
          />
        </>
      )
    case 'poly':
      return (
        <>
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M57.7027 53.0272C58.3779 54.7826 56.4768 56.4148 54.8438 55.4816L45 49.8566L45 67.1723C45 68.2769 44.1046 69.1723 43 69.1723L37 69.1723C35.8954 69.1723 35 68.2769 35 67.1723L35 49.8576L25.1556 55.4829C23.5226 56.4161 21.6215 54.7839 22.2967 53.0285L38.1333 11.8533C38.7907 10.1439 41.2092 10.1439 41.8666 11.8533L57.7027 53.0272Z"
            fill="#56CCF2"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M54.8443 55.4819C56.4773 56.415 58.3784 54.7829 57.7032 53.0274L41.8671 11.8536C41.2097 10.1442 38.7912 10.1442 38.1337 11.8536L22.2972 53.0287C21.622 54.7842 23.5231 56.4163 25.1561 55.4832L39.009 47.5672C39.6239 47.2159 40.3787 47.2159 40.9936 47.5672L54.8443 55.4819Z"
            fill="#9B51E0"
          />
        </>
      )
    case 'duo':
      return (
        <>
          <path
            d="M57.7027 53.0272C58.3779 54.7826 56.4768 56.4148 54.8438 55.4816L45 49.8566V67.1723C45 68.2769 44.1046 69.1723 43 69.1723H37C35.8954 69.1723 35 68.2769 35 67.1723V49.8576L25.1556 55.4829C23.5226 56.4161 21.6215 54.7839 22.2967 53.0285L38.1333 11.8533C38.7907 10.1439 41.2092 10.1439 41.8666 11.8533L57.7027 53.0272Z"
            fill="currentColor"
            fill-opacity="0.25"
            stroke="currentColor"
            stroke-width={strokeWidth}
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
        </>
      )
    case 'outline':
      return (
        <>
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M43.7331 11.1354C42.4182 7.7166 37.5813 7.71659 36.2663 11.1354L20.4302 52.3092C19.0799 55.8202 22.8822 59.0844 26.1482 57.2181L32.9997 53.303L32.9997 67.1723C32.9997 69.3815 34.7905 71.1723 36.9997 71.1723H42.9997C45.2088 71.1723 46.9997 69.3815 46.9997 67.1723L46.9997 53.3039L53.8518 57.2194C57.1178 59.0857 60.92 55.8214 59.5697 52.3105L43.7331 11.1354ZM39.9997 12.5713L55.8363 53.7464L45.9919 48.1211C45.3729 47.7674 44.6124 47.7699 43.9958 48.1278C43.3792 48.4856 42.9997 49.1446 42.9997 49.8576L42.9997 67.1723H36.9997V49.8566C36.9997 49.1437 36.6202 48.4846 36.0035 48.1268C35.3869 47.7689 34.6264 47.7664 34.0074 48.1201L24.1636 53.7451L39.9997 12.5713Z"
            stroke="currentColor"
            stroke-linecap={strokeLinecap}
            stroke-linejoin={strokeLinejoin}
          />
        </>
      )
  }
}

const CoreMousePointer = forwardRef((props, ref) => {
  const { size, variant, rotate, flip, children } = props

  return (
    <svg
      ref={ref}
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 80 80"
      width={size || 40}
      height={size || 40}
      transform={transform(rotate, flip)}
    >
      {children}
      <g>
        {renderString({ size, variant, rotate, flip })}
      </g>
    </svg>
  )
})

CoreMousePointer.displayName = 'CoreMousePointer'

export default CoreMousePointer
